plugins {
    id "idea"
    id "java"
    id "maven"
    id "maven-publish"
    id "application"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "io.franzbecker.gradle-lombok" version "3.2.0"
    id "com.github.johnrengelman.shadow" version "5.1.0"
    id "com.google.cloud.tools.jib" version "1.7.0"
    id "com.moowork.node" version "1.3.1"
}

group "com.hengyi"
version "1.0"

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2" }
    maven { url "https://jitpack.io" }
}

dependencyManagement {
    imports {
        mavenBom "com.github.ixtf:bom:${bomVersion}"
    }
}

dependencies {
    annotationProcessor "io.vertx:vertx-codegen:3.8.3:processor"
    compile "com.github.ixtf.vertx:jax-rs",
            "io.vertx:vertx-health-check"
// https://mvnrepository.com/artifact/org.codehaus.groovy/groovy
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.8'
// https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
    compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.2.2'

}

mainClassName = "com.hengyi.japp.znwj.ZnwjLauncher"

jar.manifest {
    attributes(
            "Main-Verticle": "com.hengyi.japp.znwj.MainVerticle",
            "Implementation-Title": name,
            "Implementation-Version": version,
            "Built-By": System.getProperty("user.name"),
            "Built-JDK": System.getProperty("java.version"),
            "Source-Compatibility": sourceCompatibility,
            "Target-Compatibility": targetCompatibility
    )
}

node {
    nodeModulesDir = file("/home/jzb/git/com.hengyi/znwj/client/ng-znwj")
}
task buildFrontend(type: NpmTask) {
    // install the express package only
    args = ['run', 'build']
}
task copyToWebRoot(type: Copy) {
    from("/home/jzb/git/com.hengyi/znwj/client/ng-znwj/dist/ng-znwj")
    destinationDir = file("${buildDir}/classes/java/main/webroot")
    dependsOn(buildFrontend)
}
processResources {
    dependsOn(copyToWebRoot)
}